// rust 0.9-pre

use std::libc::types::os::arch::extra::{BOOL, HANDLE};
use std::ptr::mut_null;

type LONG = i32;
type HWND = HANDLE;

#[deriving(Eq)]
struct POINT {
    x: LONG,
    y: LONG
}

#[link_args = "-luser32"]
extern "stdcall" {
    pub fn GetCursorPos(lpPoint:&mut POINT) -> BOOL;
    pub fn GetForegroundWindow() -> HWND;
    pub fn ScreenToClient(hWnd:HWND, lpPoint:&mut POINT);
}

#[fixed_stack_segment]
fn main() {
    let mut pt = POINT{x:0, y:0};
    loop {
        std::rt::io::timer::sleep(100); // sleep duration in milliseconds

        let pt_prev = pt;
        unsafe { GetCursorPos(&mut pt) };
        if pt != pt_prev {
            let h = unsafe { GetForegroundWindow() };
            if h == mut_null() { continue }
            let mut ptc = pt;
            unsafe { ScreenToClient(h, &mut ptc) };
            println!("x: {}, y: {}", ptc.x, ptc.y);
        }
    }
}
