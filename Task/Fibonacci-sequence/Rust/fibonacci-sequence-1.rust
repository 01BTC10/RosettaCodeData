#![feature(zero_one)]
use std::num::One;
use std::ops::Add;

struct Fib<T> {
    curr: T,
    next: T,
}

impl<T> Fib<T> where T: One {
    fn new() -> Self {
        Fib {curr: T::one(), next: T::one()}
    }
}

impl<T> Iterator for Fib<T> where T: Add<T, Output=T> + Copy {
    type Item = T;
    fn next(&mut self) -> Option<Self::Item>{
        let new = self.curr + self.next;
        self.curr = self.next;
        self.next = new;
        Some(self.curr)
    }
}

fn main() {
    for i in Fib::<u64>::new() {
        println!("{}", i);
    }
}
