#lang racket

;; infinite list using threads and channels (similar to newsqueak)
(define-syntax (bg-loop stx)
  (syntax-case stx ()
    [(_ expr ...)
     (with-syntax ([out! (datum->syntax stx 'out!)])
       #'(let ([out (make-channel)])
           (define (out! x) (channel-put out x))
           (thread (λ() (let loop () expr ... (loop))))
           out))]))
(define nats (bg-loop (for ([i (in-naturals 1)]) (out! i))))
(define (filter pred? c)
  (bg-loop (define x (channel-get c))
           (when (pred? x) (out! x))))
(define (sift n c)
  (filter (λ(x) (not (zero? (modulo x n)))) c))
(define (sieve c)
  (bg-loop (define x (channel-get c))
           (out! x)
           (set! c (sift x c))))
(define primes (begin (channel-get nats) (sieve nats)))

(define (take-upto n c)
  (let loop ()
    (let ([x (channel-get c)]) (if (<= x n) (cons x (loop)) '()))))
(take-upto 100 primes)
