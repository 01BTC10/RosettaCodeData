fn get_digits(i: &int) -> Vec<int> {
	let mut digits = Vec::new();
	let mut n = *i;
	while n > 0 {
		digits.push(n % 10);
		n /= 10;
	}
	digits.reverse();
	return digits
}

fn luhn_test(n: &int) -> bool {
	let mut digits = get_digits(n);

	let mut i = 0;
	let mut sum = 0;

	let is_odd = |x: int| x&1 == 1;

	digits.reverse();
	for n in digits.iter() {
		i += 1;
		if is_odd(i) {
			// add directly to sum
			sum += *n;
		} else {
			// get sum of digits of n*2
			let n_digits = get_digits(&(*n * 2));
			for n_digit in n_digits.iter() {
				sum += *n_digit;
			}
		}
	}

	return sum % 10 == 0;
}

fn main() {
	let nos = [49927398716, 49927398717, 1234567812345678, 1234567812345670];
	for n in nos.iter() {
		if luhn_test(n) {
			println!("{} passes.", n);
			continue
		}

		println!("{} fails.", n);
	}
}
