let aux s =
  let len = String.length s in
  let rec aux c i n acc =
    if i >= len
    then List.rev((n,c)::acc)
    else
      if c = s.[i]
      then aux c (succ i) (succ n) acc
      else aux s.[i] (succ i) 1 ((n,c)::acc)
  in
  aux s.[0] 1 1 []

let lookandsay num =
  let l = aux num in
  let s =
    List.map (fun (n,c) ->
                (string_of_int n) ^ (String.make 1 c)) l
  in
  String.concat "" s

let fold_loop f ini n =
  let rec aux i acc =
    if i >= n
    then (acc)
    else aux (succ i) (f acc i)
  in
  aux 0 ini

let _ =
  fold_loop
    (fun num _ ->
       let next = lookandsay num in
       print_endline next;
       (next))
    (string_of_int 1) 10
