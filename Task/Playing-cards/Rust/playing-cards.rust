use std::fmt;
use std::rand::{task_rng, Rng};

#[deriving(Clone)]
enum Pip {
	Ace,
	Two,
	Three,
	Four,
	Five,
	Six,
	Seven,
	Eight,
	Nine,
	Ten,
	Jack,
	Queen,
	King
}

impl fmt::Show for Pip {
	fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match *self {
        	Ace => "Ace",
        	Two => "Two",
        	Three => "Three",
        	Four => "Four",
        	Five => "Five",
        	Six => "Six",
        	Seven => "Seven",
        	Eight => "Eight",
        	Nine => "Nine",
        	Ten => "Ten",
        	Jack => "Jack",
        	Queen => "Queen",
        	King => "King"
        };

        write!(f, "{}", name)
    }
}

#[deriving(Clone)]
enum Suit {
	Spades,
	Hearts,
	Diamonds,
	Clubs
}

impl fmt::Show for Suit {
	fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let name = match *self {
        	Spades => "Spades",
        	Hearts => "Hearts",
        	Diamonds => "Diamonds",
        	Clubs => "Clubs"
        };

        write!(f, "{}", name)
    }
}

#[deriving(Clone)]
struct Card {
	pip: Pip,
	suit: Suit
}

impl Card {
	fn new(pip: Pip, suit: Suit) -> Card {
		Card {pip: pip, suit: suit}
	}
}

impl fmt::Show for Card {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{} of {}", self.pip, self.suit)
    }
}

#[deriving(Clone)]
struct Deck(Vec<Card>);

impl Deck {
    fn new() -> Deck {
        let mut cards:Vec<Card> = Vec::with_capacity(52);
        for suit in [Spades, Hearts, Diamonds, Clubs].iter() {
            for pip in [Ace, Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten, Jack, Queen, King].iter() {
                cards.push(Card::new(*pip, *suit));
            }
        }
        Deck(cards)
    }

    fn deal(&mut self) -> Option<Card> {
        let &Deck(ref mut cards) = self;
        cards.pop()
    }

    fn shuffle(&mut self) {
        let &Deck(ref mut cards) = self;
        let mut rng = task_rng();

        rng.shuffle(cards.as_mut_slice());
    }
}

impl fmt::Show for Deck {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let &Deck(ref cards) = self;

        let mut text = String::new();
        let mut i = 0;
        for card in cards.iter() {
            text.push_str(format!("{}", card).as_slice());
            i += 1;
            if i < cards.capacity() {
                text.push_str("\n");
            }
        }

        write!(f, "{}", text)
    }
}
