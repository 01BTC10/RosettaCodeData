One of the foundational mathematical constructs behind computer science is the [[wp:Universal Turing machine|universal Turing Machine]].  Indeed one way to definitively prove that a language is Turing complete is to implement a universal Turing machine in it.

'''The task'''

For this task you would simulate such a machine capable of taking the definition of any other Turing machine and executing it.  You will not, of course, have an infinite tape, but you should emulate this as much as is possible.  The three permissible actions on the tape are "left", "right" and "stay".

To test your universal Turing machine (and prove your programming language is Turing complete!), you should execute the following two Turing machines based on the following definitions.

'''Simple incrementer'''
* '''States:''' q0, qf
* '''Initial state:''' q0
* '''Terminating states:''' qf
* '''Permissible symbols:''' B, 1
* '''Blank symbol:''' B
* '''Rules:'''
** (q0, 1, 1, right, q0)
** (q0, B, 1, stay,  qf)

The input for this machine should be a tape of <code>1 1 1</code>

'''Three-state busy beaver'''
* '''States:''' a, b, c, halt
* '''Initial state:''' a
* '''Terminating states:''' halt
* '''Permissible symbols:''' 0, 1
* '''Blank symbol:''' 0
* '''Rules:'''
** (a, 0, 1, right, b)
** (a, 1, 1, left,  c)
** (b, 0, 1, left,  a)
** (b, 1, 1, right, b)
** (c, 0, 1, left,  b)
** (c, 1, 1, stay,  halt)

The input for this machine should be an empty tape.
