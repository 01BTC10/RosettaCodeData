use std::fmt;

struct Point {
    x: f64,
    y: f64
}

impl Point {
	fn new(x : f64, y : f64) -> Point{
		Point{x : x, y : y}
	}
	fn distance (&self, p : Point) -> f64{
		( (self.x - p.x).powi(2) + (self.y - p.y).powi(2) ).sqrt()
	}
}

impl fmt::Show for Point { // a Point become printable in console
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "({:.4f}, {:.4f})", self.x, self.y)
    }
}

fn is_circle(p1 : Point, p2 : Point, radius : f64){
	let separation = p1.distance(p2);

	if separation == 0.0 {
		if radius == 0.0 {
			println!("No circles can be drawn through {}", p1);
		} else {
			println!("Infinitely many circles can be drawn through {}", p1);
		}
	} else if separation == 2.0 * radius {
		println!("Given points are opposite ends of a diameter of the circle with center ({:.4f},{:.4f}) and radius {:.4f}",(p1.x+p2.x) / 2.0, (p1.y+p2.y) / 2.0, radius);
	} else if separation > 2.0 * radius {
		println!("Given points are farther away from each other than a diameter of a circle with radius {:.4f}", radius);
	} else {
		let mirror_distance = (radius.powi(2) - (separation / 2.0).powi(2)).sqrt();
		
		println!("Two circles are possible.");
		println!("Circle C1 with center ({:.4f}, {:.4f}), radius {:.4f} and Circle C2 with center ({:.4f}, {:.4f}), radius {:.4f}", ((p1.x + p2.x) / 2.0) + mirror_distance * (p1.y-p2.y)/separation, (p1.y+p2.y) / 2.0 + mirror_distance*(p2.x-p1.x)/separation, radius, (p1.x+p2.x) / 2.0 - mirror_distance*(p1.y-p2.y)/separation, (p1.y+p2.y) / 2.0 - mirror_distance*(p2.x-p1.x)/separation, radius);
	}
}

fn main() {
	let points : Vec<(Point, Point)> = vec!(
		(Point::new(0.1234, 0.9876),    Point::new(0.8765, 0.2345)),
		(Point::new(0.0000, 2.0000),    Point::new(0.0000, 0.0000)),
		(Point::new(0.1234, 0.9876),    Point::new(0.1234, 0.9876)),
		(Point::new(0.1234, 0.9876),    Point::new(0.8765, 0.2345)),
		(Point::new(0.1234, 0.9876),    Point::new(0.1234, 0.9876))
	);
	let radii : Vec<f64> = vec!(2.0, 1.0, 2.0, 0.5, 0.0);
	
	for (p, &r) in points.iter().zip(radii.iter()) {	
		println!("\nPoints : {} \t Radius : {:.4f}", p, r);
		is_circle(p.val0(), p.val1(), r);
	}
}
