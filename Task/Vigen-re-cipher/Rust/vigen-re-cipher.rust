fn uppercase_and_filter(in: &str) -> ~[u8] {
    let mut result = ~[];

    for in.each_char |c| {
        if char::is_ascii(c) {
            if char::is_lowercase(c) {
                // We know it's ascii, so just do the math directly
                result.push((c + ('A' - 'a')) as u8)
            } else if char::is_uppercase(c) {
                result.push(c as u8);
            }
        }
    }

    return result;
}

fn vigenere(key: &str, text: &str, is_encoding: bool) -> ~str {
    const A: u8 = 'A' as u8;

    let key_bytes = uppercase_and_filter(key);
    let text_bytes = uppercase_and_filter(text);

    let mut result_bytes = ~[];

    for text_bytes.eachi |i, &c| {
        let c2 = if is_encoding {
            (c + key_bytes[i % key_bytes.len()] - 2 * A) % 26 + A
        } else {
            (c - key_bytes[i % key_bytes.len()] + 26) % 26 + A
        };
        result_bytes.push(c2);
    }

    return str::from_bytes(result_bytes);
}

fn main() {
    let text = "Beware the Jabberwock, my son! The jaws that bite, the claws that catch!";
    let key = "VIGENERECIPHER";

    io::println(fmt!("Text: %s", text));
    io::println(fmt!("Key:  %s", key));

    let encoded = vigenere(key, text, true);
    io::println(fmt!("Code: %s", encoded));
    let decoded = vigenere(key, encoded, false);
    io::println(fmt!("Back: %s", decoded));
}
