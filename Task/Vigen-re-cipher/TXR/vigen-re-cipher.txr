@(next :args)
@(do
   (defun letter-mod26-op (func)  ;; add or subtract capital letters modulo 26
     (lambda (a b) (+ #\A (mod (call func (- a #\A) (- b #\A)) 26))))
   (defun vig (msg key encrypt)
     (cat-str (mapcar (letter-mod26-op (if encrypt (fun +) (fun -)))
                      (list-str msg)
                      (repeat (list-str key))) "")))
@(coll)@{key /[A-Za-z]/}@(end)
@(coll)@{msg /[A-Za-z]/}@(end)
@(cat key "")
@(filter :upcase key)
@(cat msg "")
@(filter :upcase msg)
@(bind encoded @(vig msg key t))
@(bind decoded @(vig msg key nil))
@(bind check @(vig encoded key nil))
@(output)
text:  @msg
key:   @key
enc:   @encoded
dec:   @decoded
check: @check
@(end)
