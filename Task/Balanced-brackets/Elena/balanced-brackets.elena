#define std'dictionary'*.
#define std'basic'*.
#define std'patterns'*.
#define ext'utils'*.
#define ext'routines'*.

#symbol RandomBrackets : aLength =
    Randomized
        &&count:(aLength * 2)
        &base:(FilledWideLiteral &&pattern:"[" &count:aLength + (FilledWideLiteral &&pattern:"]" &count:aLength)).

#symbol IsBalanced : aLiteral =
[
    #var aCounter := Integer::0.

    #if Scan::aLiteral seek: aChar = (aCounter append:(aChar ifequal:"[" ^^1 | ^^-1) < 0).

    ^ (0 == aCounter).
].

#symbol Program =
[
    loop &&from:0 &till:10 run: aLength =
    [
        #var anStr := RandomBrackets::aLength.
        #var balanced := IsBalanced::anStr.

        'program'output << """" << anStr << (balanced is ^^""" is balanced%n" | ^^""" is not balanced%n").
    ].

    'program'input get.
].
