use io::ReaderUtil;

fn is_ordered(s: &str) -> bool {
    let mut prev = '\x00';
    for s.each_chari |i, c| {
        if i > 0 && c < prev {
            return false;
        }
        prev = c;
    }

    return true;
}

fn find_longest_ordered_words(dict: &[~str]) -> ~[~str] {
    let mut result = ~[];
    let mut longest_length = 0;

    for dict.each |&s| {
        if is_ordered(s) {
            let n = s.len();
            if n > longest_length {
                longest_length = n;
                vec::truncate(&mut result, 0);
            }
            if n == longest_length {
                result.push(copy s);
            }
        }
    }

    return result;
}

fn main() {
    let reader = match io::file_reader(&path::Path("unixdict.txt")) {
        Ok(move r) => r,
        Err(msg) => fail msg
    };

    let mut dict = ~[];

    for reader.each_line |s| {
        dict.push(str::from_slice(s));
    }

    let longest_ordered = find_longest_ordered_words(dict);

    for longest_ordered.each |&s| {
        io::println(s);
    }
}
