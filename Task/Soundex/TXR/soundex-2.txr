@(next :args)
@(do (defun get-code (c)
       (cond ((memq c '(#\B #\F #\P #\V)) #\1)
             ((memq c '(#\C #\G #\J #\K
                        #\Q #\S #\X #\Z)) #\2)
             ((memq c '(#\D #\T)) #\3)
             ((eql c #\L) #\4)
             ((memq c '(#\M #\N)) #\5)
             ((eq c #\R) #\6)))

     (defun soundex (s)
       (if (zerop (length s))
         ""
         (let* ((su (upcase-str s))
                (o (chr-str su 0)))
           (for ((i 1) (l (length su)) cp cg)
                ((< i l) (sub-str (cat-str '(,o "000") nil) 0 4))
                ((inc i) (set cp cg))
             (set cg (get-code (chr-str su i)))
             (if (and cg (null (eql cg cp)))
               (set o (cat-str '(,o ,cg) nil))))))))
@(collect)
@arg
@  (output)
@arg -> @(soundex arg)
@  (end)
@(end)
