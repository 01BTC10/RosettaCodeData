This organic chemistry task is essentially to implement a tree enumeration algorithm.

The problem is to enumerate, without repetitions and in order of increasing size, all possible paraffin molecules (or [[wp:alkane|alkane]]s). Paraffins are built up using only carbon, which has 4 bonds and hydrogen, which has 1. All bonds for each atom must be used, so it is easiest to think of an alkane as linked carbon atoms forming the "backbone" structure, with adding hydrogens linking the remaining unused bonds.

In a paraffin one is allowed neither double bonds (two bonds between the same pair of atoms) nor cycles of linked carbons, so all paraffins with <em>n</em> carbon atoms share the empirical formula C<sub>n</sub>H<sub>2n+2</sub> but for all n >= 4 there are several distinct molecules ("isomers") with the same formula but different structures. The number of isomers rises rather rapidly with n. In counting isomers it should be borne in mind that the four bond positions on a given carbon atom can be freely interchanged and bonds rotated (including 3-D "out of the paper" rotations when you are looking at a flat diagram), so rotations or reorientations of parts of the molecule (without breaking bonds) do not give different isomers. So what seem at first to be different molecules may in fact turn out to be different orientations of the same molecule.

For example with n = 3 there is only 1 way of linking the carbons despite the different orientations you can draw the molecule in; and with n = 4 there are 2 configurations, a straight chain: (CH<sub>3</sub>)(CH<sub>2</sub>)(CH<sub>2</sub>)(CH<sub>3</sub>) and a branched chain: (CH<sub>3</sub>)(CH(CH<sub>3</sub>))(CH<sub>3</sub>). Due to bond rotations it doesn't matter which direction the branch points in. The phenomenon of "stereo-isomerism" (a molecule being different from its mirror image due to the actual 3-D arrangement of bonds) is ignored for the purpose of this task.

The input is just the number 'n' of carbon atoms of a molecule, like 17. The output is how many different different paraffins there are with 'n' carbon atoms (like 24_894 if n = 17).

The sequence of those results is visible in the [[oeis:A000602|Sloane encyclopedia]]. The sequence is (the index starts from 0, and represents the number of carbon atoms):

 1, 1, 1, 1, 2, 3, 5, 9, 18, 35, 75, 159, 355, 802, 1858, 4347, 10359,
 24894, 60523, 148284, 366319, 910726, 2278658, 5731580, 14490245,
 36797588, 93839412, 240215803, 617105614, 1590507121, 4111846763,
 10660307791, 27711253769, ...

'''Extra credit'''

Show the paraffins in some way. A flat 1D representation, with arrays or lists is enough, like:

<lang haskell>*Main> all_paraffins 1
 [CCP H H H H]
*Main> all_paraffins 2
 [BCP (C H H H) (C H H H)]
*Main> all_paraffins 3
 [CCP H H (C H H H) (C H H H)]
*Main> all_paraffins 4
 [BCP (C H H (C H H H)) (C H H (C H H H)),CCP H (C H H H) (C H H H)
 (C H H H)]
*Main> all_paraffins 5
 [CCP H H (C H H (C H H H)) (C H H (C H H H)),CCP H (C H H H)
 (C H H H) (C H H (C H H H)),CCP (C H H H) (C H H H) (C H H H)
 (C H H H)]
*Main> all_paraffins 6
 [BCP (C H H (C H H (C H H H))) (C H H (C H H (C H H H))),BCP
 (C H H (C H H (C H H H))) (C H (C H H H) (C H H H)),BCP (C H
 (C H H H) (C H H H)) (C H (C H H H) (C H H H)),CCP H (C H H H)
 (C H H (C H H H)) (C H H (C H H H)),CCP (C H H H) (C H H H)
 (C H H H) (C H H (C H H H))]</lang>

Showing a basic 2D ASCII-art representation of the paraffines is better, like (molecule names aren't necessary):
<pre> Methane         Ethane              Propane              Iso-butane

    H             H   H             H   H   H             H   H   H
    |             |   |             |   |   |             |   |   |
H - C - H     H - C - C - H     H - C - C - C - H     H - C - C - C - H
    |             |   |             |   |   |             |   |   |
    H             H   H             H   H   H             H   |   H
                                                              |
                                                          H - C - H
                                                              |
                                                              H</pre>

'''Links'''

A paper that explains the problem and its solution in a functional language:
http://www.cs.wright.edu/~tkprasad/courses/cs776/paraffins-turner.pdf

A Haskell implementation:
http://darcs.brianweb.net/nofib/imaginary/paraffins/Main.hs &nbsp; ◄── dead link.

A Scheme implementation:
http://www.ccs.neu.edu/home/will/Twobit/src/paraffins.scm

A Fortress implementation:
http://java.net/projects/projectfortress/sources/sources/content/ProjectFortress/demos/turnersParaffins0.fss?rev=3005
