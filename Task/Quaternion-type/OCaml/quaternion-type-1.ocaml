type quaternion = float * float * float * float

let q a b c d = (a, b, c, d)

let to_real (r, _, _, _) = r
let imag (_, i, j, k) = (i, j, k)

let quaternion_of_scalar s = (s, 0.0, 0.0, 0.0)

let to_list (a, b, c, d) = [a; b; c; d]
let of_list = function [a; b; c; d] -> (a, b, c, d)
  | _ -> invalid_arg "of_list"

let ( + ) = ( +. )
let ( - ) = ( -. )
let ( * ) = ( *. )
let ( / ) = ( /. )

let addr (a, b, c, d) r = (a+r, b, c, d)
let mulr (a, b, c, d) r = (a*r, b*r, c*r, d*r)

let add (a, b, c, d) (p, q, r, s) = (a+p, b+q, c+r, d+s)

let sub (a, b, c, d) (p, q, r, s) = (a-p, b-q, c-r, d-s)

let mul (a, b, c, d) (p, q, r, s) =
  ( a*p - b*q - c*r - d*s,
    a*q + b*p + c*s - d*r,
    a*r - b*s + c*p + d*q,
    a*s + b*r - c*q + d*p )

let norm2 (a, b, c, d) =
  ( a * a +
    b * b +
    c * c +
    d * d )

let norm q = sqrt(norm2 q)

let conj (a, b, c, d) = (a, -. b, -. c, -. d)
let neg (a, b, c, d) = (-. a, -. b, -. c, -. d)

let unit ((a, b, c, d) as q) =
  let n = norm q in
  (a/n, b/n, c/n, d/n)

let reciprocal ((a, b, c, d) as q) =
  let n2 = norm2 q in
  (a/n2, b/n2, c/n2, d/n2)
