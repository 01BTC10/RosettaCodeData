#define system.
#define system'collections.
#define system'routines.
#define extensions.
#define extensions'text.

// --- Normalized ---

#symbol Normalized = (:aLiteral)
[
     ^ Summing new:(String new) foreach:(arrayControl sort:(literalControl toArray:aLiteral)) literal.
].

// --- Program ---

#symbol program =
[
    #var aDictionary := Dictionary new.

    textFileControl forEachLine:"unixdict.txt" &do: aWord
    [
        #var aKey := Normalized:aWord.
        #var anItem := aDictionary getAt &key:aKey.
        nil == anItem ?
        [
            anItem := List new.
            aDictionary set &key:aKey &value:anItem.
        ].

        anItem += aWord.
    ].

    listControl sort:aDictionary &with: (:aFormer:aLater) [ aFormer value length > aLater value length ].

    controlEx foreach:aDictionary &top:20 &do: aPair [ consoleEx writeLine:(aPair value) ].
].
