#define system.
#define system'collections.
#define extensions'text.
#define extensions'text.

// --- Normalized ---

#symbol Normalized = &&:aLiteral
[
     ^ Summing new:(String new) foreach:(arrayControl sort:(stringControl toArray:aLiteral)) Literal.
].

// --- Program ---

#symbol program =
[
    #var aDictionary := Dictionary new.

    textFileControl forEachLine:"unixdict.txt" &do: &&:aWord
    [
        #var aKey := Normalized eval:aWord.
        #var anItem := aDictionary @ aKey.
        nil == anItem ?
        [
            anItem := List new.
            aDictionary setAt:aKey:anItem.
        ].

        anItem += aWord.
    ].

    listControl sort:aDictionary &with: &&:aFormer:aLater [ aFormer Value Count > aLater Value Count ].

    listControl foreach:aDictionary &top:20 &do: &&:aPair [ console writeLine:(ListPresenter new:(aPair Value)) ].
].
