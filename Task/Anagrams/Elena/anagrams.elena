#define std'dictionary'*.
#define std'basic'*.
#define std'patterns'*.
#define std'routines'*.
#define std'collections'*.
#define ext'patterns'*.
#define sys'dates'*.
#define io'* = sys'io'*.

#symbol Str2CharList : aLiteral
    = Summing &&var:List &prop:ecloneprop start:Scan::aLiteral.

#symbol Normalized : aLiteral
    = WideStrValue::(Summing::String start:
        Scan::(Str2CharList::aLiteral~esort run: aPair = (aPair former < aPair later))).

#symbol Program =
[
    #var aStart := Now.

    #var aDictionary := Dictionary.

    ReaderScan &&io'path:"unixdict.txt" &:io'AReadOnlyTextFile run: aWord =
    [
        #var aKey := Normalized::aWord.
        #var anItem := nil.
        #if anItem := aDictionary @ aKey
        | [
            anItem := List.
            aDictionary append &dictionary_key:aKey &content:anItem.
        ].

        anItem += WideStrValue::aWord.
    ].

    aDictionary~esort run: aPair = (aPair former count > aPair later count).

    Scan &&enumerable:aDictionary &length:20 &:EListSubRange run: aList =
    [
        'program'output << aList << "%n".
    ].

    #var anEnd := Now.

    #var aDiff := anEnd - aStart.
    'program'output << "%nTime elapsed in msec:" << aDiff milliseconds.
].
