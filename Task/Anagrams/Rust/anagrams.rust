use std::collections::hashmap::{HashMap, Occupied, Vacant};
use std::io::File;
use std::io::BufferedReader;
use std::cmp;

fn sort_string(string: &str) -> String {
	let mut chars = string.chars().collect::<Vec<char>>();
	chars.sort();
	String::from_chars(chars.as_slice())
}

fn main () {
	let path = Path::new("unixdict.txt");
	let mut file = BufferedReader::new(File::open(&path));
 	let mut map = HashMap::new();
 	for line in file.lines().map(|s| s.unwrap()) {
		let s = line.as_slice().trim();
		match map.entry(sort_string(s)) {
			Vacant(entry) => { entry.set(vec![s.into_string()]); },
			Occupied(mut entry) => { entry.get_mut().push(s.into_string()); }
		}
	}
 	let max_length = map.values().fold(0, |s, v| cmp::max(s, v.len()));
 	for v in map.values().filter(|&v| v.len() == max_length) {
		println!("{}", v.connect(" "))
	}
}
