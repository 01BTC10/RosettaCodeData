const func float: fltIPow (in var float: base, in var integer: exponent) is func
  result
    var float: result is 0.0;
  local
    var boolean: neg_exp is FALSE;
  begin
    if base = 0.0 then
      if exponent < 0 then
        result := Infinity;
      elsif exponent = 0 then
        result := 1.0;
      else
        result := 0.0;
      end if;
    else
      if exponent < 0 then
        exponent := -exponent;
        neg_exp := TRUE;
      end if;
      # In the twos complement representation the most
      # negative number is the only one where both the
      # number and its negation are negative. When the
      # exponent is proven to be to the most negative
      # number fltIPow returns 0.0 .
      if exponent >= 0 then
        if odd(exponent) then
          result := base;
        else
          result := 1.0;
        end if;
        exponent >>:= 1;
        while exponent <> 0 do
          base *:= base;
          if odd(exponent) then
            result *:= base;
          end if;
          exponent >>:= 1;
        end while;
        if neg_exp then
          result := 1.0 / result;
        end if;
      end if;
    end if;
  end func;
