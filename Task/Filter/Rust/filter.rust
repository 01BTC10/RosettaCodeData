fn main() {
    // Create a new vector, then use retain to filter what we want.
    // Hopefully we will see .copy_iter() or .clone_iter() soon so
    // we can write code like this:

    /*
        let nums = range(1i32, 20i32).collect::<Vec<i32>>();
        let evens = nums.copy_iter().filter(|x| x % 2 == 0).collect::<Vec<i32>>();
        for i in evens.iter() {
            println!("{}", i)
        }
    */
    println!("new vec filtered: ");
    let nums = range(1i32, 20i32).collect::<Vec<i32>>();
    let evens = nums.iter().map(|x| x.clone()).filter(|x| x % 2 == 0).collect::<Vec<i32>>();
    for i in evens.iter() {
        println!("{}", i)
    }

    // Filter an already existing vector
    println!("original vec filtered: ");
    let mut nums = range(1i32, 20i32).collect::<Vec<i32>>();
    nums.retain(|x| x % 2 == 0);
    for i in nums.iter() {
        println!("{}", i)
    }
}
