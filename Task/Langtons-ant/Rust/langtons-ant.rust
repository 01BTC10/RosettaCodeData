struct Ant {
	x: uint,
	y: uint,
	dir: Direction
}

impl Ant {
	fn move(&mut self, vec: &mut Vec<Vec<u8>>) {

		let pointer = vec.get_mut(self.y).get_mut(self.x);
		//change direction
		match *pointer {
			0 => self.dir = self.dir.right(),
			1 => self.dir = self.dir.left(),
			_ => fail!("Unexpected colour in grid")
		}
		//flip colour
		//if it's 1 it's black
		//if it's 0 it's white
		*pointer ^= 1;

		//move direction
		match self.dir {
			North => self.y -= 1,
			South => self.y += 1,
			East => self.x += 1,
			West => self.x -= 1,
		}

	}
}

enum Direction {
	North,
	East,
	South,
	West
}

impl Direction {
	fn right(self) -> Direction {
		match self {
			North => East,
			East => South,
			South => West,
			West => North,
		}
	}

	fn left(self) -> Direction {
		//3 rights equal a left
		self.right().right().right()
	}
}

fn main(){
	//create a 100x100 grid using vectors
	let mut grid: Vec<Vec<u8>> = Vec::from_elem(100, Vec::from_elem(100, 0u8));
	let mut ant = Ant {
		x: 50, y: 50, dir: North
	};

	while ant.x < 100 && ant.y < 100 {
		ant.move(&mut grid);
	}
	for each in grid.iter() {
		//construct string
		//using iterator methods to quickly convert the vector
		//to a string
		let string = each.iter()
						 .map(|&x| String::from_byte(x+32))
						 .fold(String::new(), |x, y| x+y)
						 .replace("!", "#");
		println!("{}", string);
	}
}
