{{language|Perl 6
|site=http://perl6.org/
|checking=both
|gc=yes
|strength=gradual
|safety=both
|compat=Nominative, Duck
|parampass=both
|tags=perl6}}
{{language programming paradigm|Dynamic}}
{{language programming paradigm|imperative}}
{{language programming paradigm|procedural}}
{{language programming paradigm|reflective}}
{{language programming paradigm|functional}}
{{language programming paradigm|object-oriented}}
{{language programming paradigm|generic}}
Perl 6 is the up-and-coming little sister to Perl 5. Though it resembles previous versions of [[Perl]] to no small degree, Perl 6 is substantially a new language; by design, it isn't backwards-compatible with Perl 5. In development since 2000, Perl 6 still lacks a complete implementation of its specification, the [http://perlcabal.org/syn/ Synopses].

Damian Conway described the basic philosophy of Perl 6 as follows:

<blockquote>The Perl 6 design process is about keeping what works in Perl 5, fixing what doesn't, and adding what's missing. That means there will be a few fundamental changes to the language, a large number of extensions to existing features, and a handful of completely new ideas. These modifications, enhancements, and innovations will work together to make the future Perl even more insanely great -- without, we hope, making it even more greatly insane.</blockquote>

Major new features include multiple dispatch, declarative classes, grammars, formal parameters to subroutines, type constraints on variables, lazy evaluation, junctions, meta-operators, and the ability to change Perl's syntax at will with hygienic macros and user-defined operators.

There are several different partial implementations of Perl 6. They vary widely in design goals, degree of completeness, and current development activity. At present, the implementation closest to matching the specification is [[Rakudo]].

<br clear=right><!-- Stop the category list and infobox from overlapping -->